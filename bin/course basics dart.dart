void main() {
// типы данных в дарт
  ///numbers - числовые типы(int & double)
  int x = 52; //целочисленные не более 64 бита
  double num = 123.44; //вещественные(с плавающей точкой) 64 бит

  ///strings - последовательность символов в код UTF-16, можно как '', так и ""
  String s1 = 'Одинарные.';
  String s2 = "Двойные.";

  ///booleans - имя bool, для логич знач. - true & false
  bool no = false;
  bool yes = true;

  ///lists (массивы) - список, представляющий набор значений или массив
  List list = [0, 1, 2];
  //можно указать тип данных который хранит список
  List<int> list99 = [0, 1, 2];
  // 2 вида - фиксированный и нефиксированный
  //нефикс - может динам. менять размер, напр. методом add()
  list.add(3); //добавляем в список одно значение
  List list1 = [];
  List list2 = [0, 1, 2];
  // фикс - в конструктор List() передается размер списка

  ///sets - неупорядоченная коллекция уникальных элементов. Для создания фиг скобки {}
  Set set = {0, 1, 2, 3};
  Set<int> set1 = {0, 1, 2, 3};
  // отличительная особенность - могут содержать только УНИКАЛЬНЫЕ значения

  ///maps - коллекция, хранит информацию ключ-значение. И ключ и знач могут любого типа
  ///Каждый ключ уник, одинаковых нет. Доступ к знач осуществляется через ключ.
  var gifts = {
    // Ключ: Значение
    'first': 'partridge',
    'second': 'turtledoves',
    'fifth': 'golden rings'
  };
  var nobleGases = {2: 'helium', 10: 'neon', 18: 'argon'};

  ///runes - также строки как String, но в UTF-32. По умолчанию все строки в кавычках
  ///предст тип String для определения переменной Runes нужен спец синтаксис
  Runes input = new Runes('\u2665 \u{1f605}');
  print(new String.fromCharCodes(input));

  ///symbols - Это символы! (ваш кэп), для определения объекта этого типа  - #
  Symbol sym = #X; //представляет символ Х

//Переменные и константы
  /// var & dynamic
  /// var - способ объявить перем. без указ типа(компилятор сам опред необходимый)
  var x1 = 88; // тип определил как int
  var str = 'hello'; //тип string
  var list7 = [1, 2, 3]; // тип list

  ///dynamic - как и var, но позволяет изменять тип переменной.
  /*var x3 = 4;
  print(x);
  x = 'Four';
  print(x); -выдаст ошибку, чтобы решить проблему вместо var применить оператор dynamic
  */

  ///Константы
  ///Для объявления - final & const.
  ///Dart предотвратит изменение знач переменной объявленной константой
  ///Final & const могут использоваться вместе с типом данных или вместо var(и тип
  ///тоже определится автоматом)
  const x7 = 1;
  const int y8 = 2;

//
}
