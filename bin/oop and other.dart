void main() {

///ООП - стиль программирования, основанный на классах и объектах.
///Другими словами методология или парадигма разработки, где данные в программе 
///формируются в объекты с учетом определенного уровня абстракций. Между объектами
///иерархические связи, а каждый объект - законченная программная единица, обладающая
///опред свойствами и методами взаимодействия с ней. 

///Что такое объект?
///В ООП чертеж, схема, описание или шаблон из реальной жизни называется классом, 
///из которого при выполнении программы создается объект
///Класс-описание еще не созданного объекта, как бы общий шаблон, состоящий из полей,
///методов и конструктора, а объект - экземпляр класса, созданный на основе этого
///описания.
///Объект - некоторая структура данных, у которой доступен набор свойств и методов.
///Объект может наследовать свойства и методы у какой-то другой родительской сущности
///и может сам являться родитеским для некоторого производного объекта

///Интерфейс - набор свойств и методов объекта. Если в объекте доступны свойства 
///и методы того или иного интерфейса, говорят что объект реализует данный интерфейс

///Абстракция ООП - способ представления элементов задачи из реального мира в 
///виде объектов в программе. Абстракция всегда связана с обобщением некоторой инфы 
///о свойствах предметов или объектов, поэтому главно - отделить значимую инфу
///от незначимой в контексте решаемой задачи. При этом уровней абстракции может быть
///несколько.


///Инкапсуляция
///Если с помощью Абстракции мы выделяем общее для всех объектов. Однако каждая
///единица чего либо имеет и индивидуальность. Как же в программе эту индивид 
///обозначить. Для этого используют принцип инкапсуляции - при котором атрибуты
///и поведение объекта объединяются в одном классе, внутренняя реализация скрывается
///от пользователя, а для работы с объектом предоставляется открытый интерфейс.
///Задача программиста - какие атрибуты и методы будут доступны для открытого
///доступа а какие являются внутренней реализацией объекта и должны быть недоступны
///для изменений

///Инкапсуляция и управление доступом
///Характеристика чего-либо - это его состояние. В Java состояние будущих объектов
///описывается в классе с помощью полей, а их поведение - с помощью методов
///Возможность же изменения состояния и поведения осуществляется с помощью
///модификаторов доступа к полям и методам - private, public
///Предоставление открытых методов для работы с объектом также является частью 
///механизма инкапсуляции, так как если полностью закрыть доступ к объекту -он
///станет бесполезным
///Доступ к свойствам объектов реализуются с помощью геттеров и сеттеров. Обычно
///напрямую доступны только те свойства объекта, которые невозможно изменить - 
///константы. Значение всех прочих свойств запрашивается не напрямую а через Геттеры-
///методы возвращающие текущее значение того или иного свойства. Изменяются же значения
///через Сеттеры-методы получающие во входном параметре новое знач свойств. Сеттер
///может выполнить опред проверки нового параметра и в случае несоответствия - не устанавливать
///новое значение


///Наследование
///В программировании наследование - использование уже существующих классов для 
///описания новых
///Использования его позволяет значительно уменьшить объем кода и облегчить работу
///программиста.

///Полиморфизм
///Принцип, когда программа может использовать объекты с одинаковым интерфейсом без
///инфо о внутреннем устройстве объекта
///Основное преимущество полиморфизма - выбор реализации в процессе выполнения программы,
///это называется динамическим





}
